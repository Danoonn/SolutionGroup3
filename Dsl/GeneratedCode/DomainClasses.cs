//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass SoftwareArchitecture
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.SoftwareArchitecture.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.SoftwareArchitecture.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("54aa546d-9e22-4e3d-82f8-4805f13b4eeb")]
	public partial class SoftwareArchitecture : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoftwareArchitecture domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x54aa546d, 0x9e22, 0x4e3d, 0x82, 0xf8, 0x48, 0x05, 0xf1, 0x3b, 0x4e, 0xeb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoftwareArchitecture(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoftwareArchitecture(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevel> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevel>, ImpactLevel>(global::Company.Workshop8.SoftwareArchitectureHasElements.SoftwareArchitectureDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Workshop8.ImpactLevel.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Workshop8.ImpactLevel sourceImpactLevel1 = sourceElement as global::Company.Workshop8.ImpactLevel;
			if (sourceImpactLevel1 != null)
			{
				// Create link for path SoftwareArchitectureHasElements.Elements
				this.Elements.Add(sourceImpactLevel1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Workshop8.ImpactLevel sourceImpactLevel1 = sourceElement as global::Company.Workshop8.ImpactLevel;
			if (sourceImpactLevel1 != null)
			{
				// Delete link for path SoftwareArchitectureHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.Workshop8.SoftwareArchitectureHasElements.GetLinks((global::Company.Workshop8.SoftwareArchitecture)this, sourceImpactLevel1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Workshop8.SoftwareArchitectureHasElements.SoftwareArchitectureDomainRoleId, global::Company.Workshop8.SoftwareArchitectureHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass ImpactLevel
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.ImpactLevel.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.ImpactLevel.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("b275d665-0ff2-4cf8-b014-9cb4f2c1a5c0")]
	public partial class ImpactLevel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb275d665, 0x0ff2, 0x4cf8, 0xb0, 0x14, 0x9c, 0xb4, 0xf2, 0xc1, 0xa5, 0xc0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd325753c, 0x7e72, 0x43d0, 0xb5, 0xd1, 0x68, 0x1e, 0xd9, 0x9b, 0xa7, 0xee);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Workshop8.ImpactLevel.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.ImpactLevel/Name.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.ImpactLevel/Name.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("d325753c-7e72-43d0-b5d1-681ed99ba7ee")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactLevel.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactLevel, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactLevel.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactLevel.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactLevel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactLevel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoftwareArchitecture opposite domain role accessor
		/// <summary>
		/// Gets or sets SoftwareArchitecture.
		/// </summary>
		public virtual SoftwareArchitecture SoftwareArchitecture
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Workshop8.SoftwareArchitectureHasElements.ElementDomainRoleId) as SoftwareArchitecture;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Workshop8.SoftwareArchitectureHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Concern opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Concern.
		/// Description for Company.Workshop8.ImpactLevelHasConcern.ImpactLevel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.Workshop8.ImpactLevelHasConcern.ImpactLevelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Workshop8.Concern.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Workshop8.Concern sourceConcern1 = sourceElement as global::Company.Workshop8.Concern;
			if (sourceConcern1 != null)
			{
				// Create link for path ImpactLevelHasConcern.Concern
				this.Concern.Add(sourceConcern1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Workshop8.Concern sourceConcern1 = sourceElement as global::Company.Workshop8.Concern;
			if (sourceConcern1 != null)
			{
				// Delete link for path ImpactLevelHasConcern.Concern
				
				foreach (DslModeling::ElementLink link in global::Company.Workshop8.ImpactLevelHasConcern.GetLinks((global::Company.Workshop8.ImpactLevel)this, sourceConcern1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Workshop8.ImpactLevelHasConcern.ImpactLevelDomainRoleId, global::Company.Workshop8.ImpactLevelHasConcern.ConcernDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass Structural
	/// Description for Company.Workshop8.Structural
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.Structural.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.Structural.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("208052b1-aecd-44a1-bfdb-2b441e8ba097")]
	public partial class Structural : ImpactLevel
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Structural domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x208052b1, 0xaecd, 0x44a1, 0xbf, 0xdb, 0x2b, 0x44, 0x1e, 0x8b, 0xa0, 0x97);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Structural(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Structural(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region StructuralName domain property code
		
		/// <summary>
		/// StructuralName domain property Id.
		/// </summary>
		public static readonly global::System.Guid StructuralNameDomainPropertyId = new global::System.Guid(0x3ba4c630, 0xfeaf, 0x4fd3, 0xb1, 0x1c, 0x1f, 0x3c, 0xf6, 0x90, 0x62, 0xe8);
		
		/// <summary>
		/// Storage for StructuralName
		/// </summary>
		private global::System.String structuralNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StructuralName domain property.
		/// Description for Company.Workshop8.Structural.Structural Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.Structural/StructuralName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.Structural/StructuralName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3ba4c630-feaf-4fd3-b11c-1f3cf69062e8")]
		public global::System.String StructuralName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return structuralNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StructuralNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Structural.StructuralName domain property.
		/// </summary>
		internal sealed partial class StructuralNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Structural, global::System.String>
		{
			private StructuralNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Structural.StructuralName domain property value handler.
			/// </summary>
			public static readonly StructuralNamePropertyHandler Instance = new StructuralNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Structural.StructuralName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StructuralNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Structural element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.structuralNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Structural element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.structuralNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass Enabling
	/// Description for Company.Workshop8.Enabling
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.Enabling.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.Enabling.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("458231a4-eed9-4b36-b989-06c544ba754b")]
	public partial class Enabling : ImpactLevel
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Enabling domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x458231a4, 0xeed9, 0x4b36, 0xb9, 0x89, 0x06, 0xc5, 0x44, 0xba, 0x75, 0x4b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enabling(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enabling(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EnablingName domain property code
		
		/// <summary>
		/// EnablingName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnablingNameDomainPropertyId = new global::System.Guid(0x7a6b9dc9, 0x5868, 0x4616, 0x9c, 0x16, 0x41, 0xe9, 0x5e, 0xa9, 0x39, 0x61);
		
		/// <summary>
		/// Storage for EnablingName
		/// </summary>
		private global::System.String enablingNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EnablingName domain property.
		/// Description for Company.Workshop8.Enabling.Enabling Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.Enabling/EnablingName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.Enabling/EnablingName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7a6b9dc9-5868-4616-9c16-41e95ea93961")]
		public global::System.String EnablingName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enablingNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnablingNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Enabling.EnablingName domain property.
		/// </summary>
		internal sealed partial class EnablingNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Enabling, global::System.String>
		{
			private EnablingNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Enabling.EnablingName domain property value handler.
			/// </summary>
			public static readonly EnablingNamePropertyHandler Instance = new EnablingNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Enabling.EnablingName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnablingNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Enabling element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.enablingNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Enabling element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enablingNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass Immediate
	/// Description for Company.Workshop8.Immediate
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.Immediate.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.Immediate.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d0dc11ce-2e82-450f-8ec8-02476f8c0667")]
	public partial class Immediate : ImpactLevel
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Immediate domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0dc11ce, 0x2e82, 0x450f, 0x8e, 0xc8, 0x02, 0x47, 0x6f, 0x8c, 0x06, 0x67);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Immediate(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Immediate(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ImmediateName domain property code
		
		/// <summary>
		/// ImmediateName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImmediateNameDomainPropertyId = new global::System.Guid(0x7359db70, 0x0045, 0x40cd, 0x94, 0x36, 0x35, 0x97, 0xdc, 0x31, 0x1f, 0x82);
		
		/// <summary>
		/// Storage for ImmediateName
		/// </summary>
		private global::System.String immediateNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImmediateName domain property.
		/// Description for Company.Workshop8.Immediate.Immediate Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.Immediate/ImmediateName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.Immediate/ImmediateName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7359db70-0045-40cd-9436-3597dc311f82")]
		public global::System.String ImmediateName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return immediateNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImmediateNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Immediate.ImmediateName domain property.
		/// </summary>
		internal sealed partial class ImmediateNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Immediate, global::System.String>
		{
			private ImmediateNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Immediate.ImmediateName domain property value handler.
			/// </summary>
			public static readonly ImmediateNamePropertyHandler Instance = new ImmediateNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Immediate.ImmediateName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImmediateNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Immediate element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.immediateNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Immediate element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.immediateNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass Concern
	/// Description for Company.Workshop8.Concern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.Concern.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.Concern.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("529c58e6-218f-4701-a98c-a39aae2cfec8")]
	public partial class Concern : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Concern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x529c58e6, 0x218f, 0x4701, 0xa9, 0x8c, 0xa3, 0x9a, 0xae, 0x2c, 0xfe, 0xc8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConcernName domain property code
		
		/// <summary>
		/// ConcernName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConcernNameDomainPropertyId = new global::System.Guid(0x76a62efd, 0xde17, 0x48cc, 0xb3, 0xe3, 0x2e, 0xdc, 0x6c, 0x64, 0x34, 0x5f);
		
		/// <summary>
		/// Storage for ConcernName
		/// </summary>
		private global::System.String concernNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConcernName domain property.
		/// Description for Company.Workshop8.Concern.Concern Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.Concern/ConcernName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.Concern/ConcernName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("76a62efd-de17-48cc-b3e3-2edc6c64345f")]
		public global::System.String ConcernName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return concernNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConcernNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Concern.ConcernName domain property.
		/// </summary>
		internal sealed partial class ConcernNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Concern, global::System.String>
		{
			private ConcernNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Concern.ConcernName domain property value handler.
			/// </summary>
			public static readonly ConcernNamePropertyHandler Instance = new ConcernNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Concern.ConcernName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConcernNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Concern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.concernNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Concern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.concernNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImpactLevel opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpactLevel.
		/// Description for Company.Workshop8.ImpactLevelHasConcern.Concern
		/// </summary>
		public virtual ImpactLevel ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Workshop8.ImpactLevelHasConcern.ConcernDomainRoleId) as ImpactLevel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Workshop8.ImpactLevelHasConcern.ConcernDomainRoleId, value);
			}
		}
		#endregion
		#region TargetConcern opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcern.
		/// Description for Company.Workshop8.ConcernReferencesTargetConcern.SourceConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.Workshop8.ConcernReferencesTargetConcern.SourceConcernDomainRoleId);
			}
		}
		#endregion
		#region SourceConcern opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConcern.
		/// Description for Company.Workshop8.ConcernReferencesTargetConcern.TargetConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> SourceConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.Workshop8.ConcernReferencesTargetConcern.TargetConcernDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass EconomicConcern
	/// Description for Company.Workshop8.EconomicConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.EconomicConcern.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.EconomicConcern.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("471b86ff-1a4b-41c8-aaec-fc1482478fe9")]
	public partial class EconomicConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EconomicConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x471b86ff, 0x1a4b, 0x41c8, 0xaa, 0xec, 0xfc, 0x14, 0x82, 0x47, 0x8f, 0xe9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EcoName domain property code
		
		/// <summary>
		/// EcoName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EcoNameDomainPropertyId = new global::System.Guid(0xfb0e5fc3, 0xdf2a, 0x4d52, 0x9b, 0x81, 0xc9, 0xdd, 0xb0, 0xce, 0x0c, 0x23);
		
		/// <summary>
		/// Storage for EcoName
		/// </summary>
		private global::System.String ecoNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EcoName domain property.
		/// Description for Company.Workshop8.EconomicConcern.Eco Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.EconomicConcern/EcoName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.EconomicConcern/EcoName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fb0e5fc3-df2a-4d52-9b81-c9ddb0ce0c23")]
		public global::System.String EcoName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ecoNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EcoNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EconomicConcern.EcoName domain property.
		/// </summary>
		internal sealed partial class EcoNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EconomicConcern, global::System.String>
		{
			private EcoNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EconomicConcern.EcoName domain property value handler.
			/// </summary>
			public static readonly EcoNamePropertyHandler Instance = new EcoNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EconomicConcern.EcoName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EcoNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EconomicConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ecoNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EconomicConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ecoNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass SocialConcern
	/// Description for Company.Workshop8.SocialConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.SocialConcern.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.SocialConcern.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8154cfe4-8a34-410f-a6c6-1b7c7dda8d5a")]
	public partial class SocialConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocialConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8154cfe4, 0x8a34, 0x410f, 0xa6, 0xc6, 0x1b, 0x7c, 0x7d, 0xda, 0x8d, 0x5a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SocialName domain property code
		
		/// <summary>
		/// SocialName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SocialNameDomainPropertyId = new global::System.Guid(0x95e83b9b, 0x3dc7, 0x429c, 0xb6, 0xae, 0x0c, 0x7f, 0xef, 0xd2, 0xb5, 0x50);
		
		/// <summary>
		/// Storage for SocialName
		/// </summary>
		private global::System.String socialNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SocialName domain property.
		/// Description for Company.Workshop8.SocialConcern.Social Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.SocialConcern/SocialName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.SocialConcern/SocialName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("95e83b9b-3dc7-429c-b6ae-0c7fefd2b550")]
		public global::System.String SocialName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return socialNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SocialNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SocialConcern.SocialName domain property.
		/// </summary>
		internal sealed partial class SocialNamePropertyHandler : DslModeling::DomainPropertyValueHandler<SocialConcern, global::System.String>
		{
			private SocialNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SocialConcern.SocialName domain property value handler.
			/// </summary>
			public static readonly SocialNamePropertyHandler Instance = new SocialNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SocialConcern.SocialName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SocialNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SocialConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.socialNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SocialConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.socialNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass EnvironmentalConcern
	/// Description for Company.Workshop8.EnvironmentalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.EnvironmentalConcern.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.EnvironmentalConcern.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("053d87bc-b1b2-4cab-a78e-da58056c4a9e")]
	public partial class EnvironmentalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnvironmentalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x053d87bc, 0xb1b2, 0x4cab, 0xa7, 0x8e, 0xda, 0x58, 0x05, 0x6c, 0x4a, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EnvironmentalName domain property code
		
		/// <summary>
		/// EnvironmentalName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnvironmentalNameDomainPropertyId = new global::System.Guid(0xcdfe0906, 0x32f7, 0x4901, 0xb7, 0x4e, 0x2b, 0x6c, 0xa0, 0x0c, 0xf8, 0x74);
		
		/// <summary>
		/// Storage for EnvironmentalName
		/// </summary>
		private global::System.String environmentalNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EnvironmentalName domain property.
		/// Description for Company.Workshop8.EnvironmentalConcern.Environmental Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.EnvironmentalConcern/EnvironmentalName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.EnvironmentalConcern/EnvironmentalName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cdfe0906-32f7-4901-b74e-2b6ca00cf874")]
		public global::System.String EnvironmentalName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return environmentalNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnvironmentalNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnvironmentalConcern.EnvironmentalName domain property.
		/// </summary>
		internal sealed partial class EnvironmentalNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EnvironmentalConcern, global::System.String>
		{
			private EnvironmentalNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnvironmentalConcern.EnvironmentalName domain property value handler.
			/// </summary>
			public static readonly EnvironmentalNamePropertyHandler Instance = new EnvironmentalNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnvironmentalConcern.EnvironmentalName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnvironmentalNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EnvironmentalConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.environmentalNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnvironmentalConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.environmentalNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.Workshop8
{
	/// <summary>
	/// DomainClass TechnicalConcern
	/// Description for Company.Workshop8.TechnicalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Workshop8.TechnicalConcern.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Workshop8.TechnicalConcern.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Workshop8.Workshop8DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7bb284be-cfc4-4783-b28b-80dd45adf40e")]
	public partial class TechnicalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TechnicalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7bb284be, 0xcfc4, 0x4783, 0xb2, 0x8b, 0x80, 0xdd, 0x45, 0xad, 0xf4, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TechName domain property code
		
		/// <summary>
		/// TechName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TechNameDomainPropertyId = new global::System.Guid(0x26b77377, 0xb8f5, 0x4ea9, 0x95, 0x8f, 0xef, 0x66, 0x9d, 0xbd, 0xf1, 0xcc);
		
		/// <summary>
		/// Storage for TechName
		/// </summary>
		private global::System.String techNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TechName domain property.
		/// Description for Company.Workshop8.TechnicalConcern.Tech Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Workshop8.TechnicalConcern/TechName.DisplayName", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Workshop8.TechnicalConcern/TechName.Description", typeof(global::Company.Workshop8.Workshop8DomainModel), "Company.Workshop8.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("26b77377-b8f5-4ea9-958f-ef669dbdf1cc")]
		public global::System.String TechName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return techNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TechNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TechnicalConcern.TechName domain property.
		/// </summary>
		internal sealed partial class TechNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TechnicalConcern, global::System.String>
		{
			private TechNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TechnicalConcern.TechName domain property value handler.
			/// </summary>
			public static readonly TechNamePropertyHandler Instance = new TechNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TechnicalConcern.TechName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TechNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TechnicalConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.techNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TechnicalConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.techNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
